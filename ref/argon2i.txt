OpenSSL command:
https://asecuritysite.com/openssl/argon

-- ARGON2I
openssl kdf -keylen 32 -kdfopt pass:Hello -kdfopt salt:NaCl1234 -kdfopt iter:10 -kdfopt memcost:8192 argon2i

Output:
7D:78:F0:48:97:F5:33:2A:20:78:6B:F5:72:57:F7:D6:E7:53:7A:7A:98:83:15:EE:D3:DF:1F:E4:FE:CF:D4:B8

-- ARGON2ID
openssl kdf -keylen 32 -kdfopt pass:Hello -kdfopt salt:NaCl1234 -kdfopt iter:10 -kdfopt memcost:8192 argon2id

Output:
72:98:D7:97:5A:94:63:06:D2:F4:CC:DB:FC:3D:BF:46:4D:7A:1F:B4:38:46:5A:B5:D8:8A:9B:B5:A4:7A:99:61

-- Note: Not available on OpenSSL 3.0 (Ubuntu 24.04)
---------
Returns same output as OpenSSL if option memcost is not used.
Increasing iterations to 10000 or more if memcost is not used, will slow down hash.
> kdf = require"openssl.kdf"
> options = {}
> options.type = "argon2id"
> options.outlen = 32
> options.pass = "Hello"
> options.salt = "NaCl1234"
> options.iter = 10
> options.maxmem_bytes = 8192
> h = kdf.derive(options)
> print(h)



openssl kdf -keylen 32 -kdfopt digest:sha512 -kdfopt pass:Hello -kdfopt salt:NaCl1234 -kdfopt iter:10 pbkdf2


### Command Breakdown
```sh
openssl kdf -keylen 32 -kdfopt digest:sha512 -kdfopt pass:Hello -kdfopt salt:NaCl1234 -kdfopt iter:10 pbkdf2
```

- `openssl kdf`: This is the OpenSSL command to perform Key Derivation Function (KDF) operations.
- `-keylen 32`: This specifies the length of the derived key in bytes. In this case, it's 32 bytes (256 bits).
- `-kdfopt digest:sha512`: This specifies the hash function to use. Here, it's SHA-512.
- `-kdfopt pass:Hello`: This specifies the password to use for the KDF. Here, it's "Hello".
- `-kdfopt salt:NaCl1234`: This specifies the salt to use. Here, it's "NaCl1234".
- `-kdfopt iter:10`: This specifies the number of iterations for the KDF. Here, it's 10.
- `pbkdf2`: This specifies the KDF algorithm to use. Here, it's PBKDF2.

### What is PBKDF2?
PBKDF2 (Password-Based Key Derivation Function 2) is a key derivation function that applies 
a pseudorandom function (such as HMAC or a block cipher) to the input password and salt, 
repeating the process for a specified number of iterations. The purpose is to make the derived key more 
secure by increasing the computational cost.

For PBKDF2-HMAC-SHA512, the recommended salt size is:
At least 128 bits (16 bytes): This is the minimum recommended length by the 
National Institute of Standards and Technology (NIST).
16 bytes (128 bits): In most cases, 16 bytes is considered sufficient.
12-24 bytes: Normal recommendations fall within this range, with 16 bytes considered quite solid.
24 bytes: Some sources suggest going with 24 bytes for a greater safety margin. 

### HMAC vs. SHA512 in PBKDF2
- **HMAC-SHA512**: HMAC (Hash-based Message Authentication Code) is a specific construction that uses a 
cryptographic hash function (in this case, SHA-512) and a secret key to produce a message authentication code. 
When PBKDF2 is configured with HMAC-SHA512, it uses the HMAC construction with the SHA-512 hash function.
- **SHA512**: This is just the raw SHA-512 hash function.

### What Your Command Does
When you specify `-kdfopt digest:sha512` in the command, PBKDF2 uses HMAC-SHA512 as the pseudorandom function. 
This means that the password and salt are combined using HMAC with SHA-512, and this process is repeated for 
the specified number of iterations (10 in your case).

### Summary
- **HMAC-SHA512**: Yes, the command is using HMAC-SHA512 as the pseudorandom function for PBKDF2.
- **SHA512**: No, it is not just using SHA-512 directly. The HMAC construction with SHA-512 is used.

This configuration makes the derived key more secure by leveraging the properties of HMAC, which provides 
better security guarantees compared to using a raw hash function.
---------

PBKDF2 Example (needs high iterations)

> kdf = require"openssl.kdf"
> options = {}
> options.type = "pbkdf2"
> options.outlen = 32
> options.pass = "Hello"
> options.salt = "NaCl1234"
> options.iter = 200000
> options.md = "sha512"
> h = kdf.derive(options)
> print(bin2hex(h))
067212b1805f5fa94ae04eb4b6246fc5688054b1a19b91aa9d509b4aaf5b2cfd

================

Password hashing in Python with pbkdf2

I was researching password hashing for datasette-auth-passwords. I wanted very secure 
defaults that would work using the Python standard library without any extra dependencies.

I ended up following Django's example and implementing pbkdf2_sha256 with 260,000 iterations. 
Here's my version of the way Django does this - I chose to use the same hashed password 
format (algorithm$iterations$salt$hash) in case I wanted to change the hashing algorithm used 
in the future.

import base64
import hashlib
import secrets

ALGORITHM = "pbkdf2_sha256"


def hash_password(password, salt=None, iterations=260000):
    if salt is None:
        salt = secrets.token_hex(16)
    assert salt and isinstance(salt, str) and "$" not in salt
    assert isinstance(password, str)
    pw_hash = hashlib.pbkdf2_hmac(
        "sha256", password.encode("utf-8"), salt.encode("utf-8"), iterations
    )
    b64_hash = base64.b64encode(pw_hash).decode("ascii").strip()
    return "{}${}${}${}".format(ALGORITHM, iterations, salt, b64_hash)


def verify_password(password, password_hash):
    if (password_hash or "").count("$") != 3:
        return False
    algorithm, iterations, salt, b64_hash = password_hash.split("$", 3)
    iterations = int(iterations)
    assert algorithm == ALGORITHM
    compare_hash = hash_password(password, salt, iterations)
    return secrets.compare_digest(password_hash, compare_hash)

==============



https://stackoverflow.com/questions/58431973/argon2-library-that-hashes-passwords-without-a-secret-and-with-a-random-salt-tha
Example of Python's implementation:

1) The salt is random, using os.urandom. I thus wonder if the verify method is somehow able 
to extract the salt from the hash?

The hash method returns a string that encodes the salt, the parameters, and the password 
hash itself, as shown in the documentation:

>>> from argon2 import PasswordHasher
>>> ph = PasswordHasher()
>>> hash = ph.hash("s3kr3tp4ssw0rd")
>>> hash  
'$argon2id$v=19$m=102400,t=2,p=8$tSm+JOWigOgPZx/g44K5fQ$WDyus6py50bVFIPkjA28lQ'
>>> ph.verify(hash, "s3kr3tp4ssw0rd")
True

The format is summarized in the Argon2 reference implementation; perhaps there are other 
references. In this case:

$argon2id$...
The hash is Argon2id, which is the specific Argon2 variant that everyone should use 
(combining the side channel resistance of Argon2i with the more difficult-to-crack Argon2d).

...$v=19$...
The version of the hash is 0x13 (19 decimal), meaning Argon2 v1.3, the version adopted by 
the Password Hashing Competition.

...$m=102400,t=2,p=8$...
The memory use is 100 MB (102400 KB), the time is 2 iterations, and the parallelism is 8 ways.

...$tSm+JOWigOgPZx/g44K5fQ$...
The salt is tSm+JOWigOgPZx/g44K5fQ (base64), 
or b5 29 be 24 e5 a2 80 e8  0f 67 1f e0 e3 82 b9 7d (hexadecimal).

...$WDyus6py50bVFIPkjA28lQ
The password hash itself is WDyus6py50bVFIPkjA28lQ (base64), 
or 58 3c ae b3 aa 72 e7 46  d5 14 83 e4 8c 0d bc 95 (hexadecimal).

The verify method takes this string and a candidate password, recomputes the password hash 
with all the encoded parameters, and compares it to the encoded password hash.

And if indeed Argon2 can extract the salt out of the hash, how is using a salt any safer 
in that case since a hostile entity who gets a hashed password should then also be able to extract the salt?

The purpose of the salt is to mitigate the batch advantage of multi-target attacks by simply 
being different for each user.

If everyone used the same salt, then an adversary trying to find the first of $n$ passwords 
given hashes would need to spend only about $1/n$ the cost that an adversary trying to find 
a single specific password given its hash would have to spend. Alternatively, an adversary 
could accelerate breaking individual passwords by doing an expensive precomputation (rainbow tables).

But if everyone uses a different salt, then that batch advantage or precomputation 
advantage goes away.

Choosing the salt uniformly at random among 32-byte strings is just an easy way to guarantee 
every user has a distinct salt. In principle, one could imagine an authority handing out 
everyone in the world a consecutive number to use as their Argon2 salt, but that system 
doesn't scale very wellâ€”I don't just mean that your application could use the counting 
authority, but every application in the world would have to use the same counting authority, 
and I think the Count is too busy at Sesame Street to take on that job.

2) By default I do not supply any secret to the hash method and instead the password itself 
seems to be used as a secret. Is this secure? What are the downsides for me not supplying a 
secret to the hashing method?

Generally the password is the secret: if someone knows the password then they're supposed to 
be able to log in; if they don't know the password, they're supposed to be shown the door!

That said, Argon2 also supports a secret key, which is separate from the salt and separate 
from the password.

If there is a meaningful security boundary between your password database and your 
application so that it's plausible an adversary might compromise one but not the other, 
then the application can pick a uniform random 32-byte string as a secret key, and use that 
with Argon2 so that the password hash is a secret function of the secret password.

That way, an adversary who dumps the password database but not the application's secret key 
won't even be able to test a guess for a password because they don't know the secret key 
needed to compute a password's hash.
